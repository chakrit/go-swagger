{{ define "clientresponse" }}/*
{{ if .Description }}{{ .Description }}{{else}}{{ .ClassName}} {{ humanize .ClassName }}{{end}}
*/
type {{ .ClassName }} struct {
  {{ range .Headers }}{{if .Description }}// {{ .Description }}{{ end }}
  {{ .PropertyName }} {{ .Type }}
  {{ end }}
  {{ if .Type }}
  Payload {{ if .IsComplexObject }}*{{ end }}{{.Type}}
  {{ end }}
}

func ({{ .ReceiverName }} *{{.ClassName}}) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {
  {{ range .Headers }}
  // response header {{.ParamName}}
  {{if .Converter}}{{ camelize .ParamName }}, err := {{.Converter}}(response.GetHeader("{{ .ParamName }}"))
  if err != nil {
    return errors.InvalidType({{.Path}}, "header", "{{.Type}}", response.GetHeader("{{ .ParamName }}"))
  }
  {{ .ReceiverName }}.{{ pascalize .ParamName }} = {{ camelize .ParamName }}
  {{else}}{{ .ReceiverName }}.{{ pascalize .ParamName }} = response.GetHeader("{{ .ParamName }}")
  {{end}}
  {{ end }}
  {{ if .Type }}
  // response payload
  if err := consumer.Consume(response.Body(), {{ if not .IsComplexObject }}&{{ end}}{{ .ReceiverName }}.Payload); err != nil {
    return err
  }
  {{ end }}
  return nil
}
{{ end }}package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
  "net/http"
  "github.com/go-swagger/go-swagger/httpkit"
  "github.com/go-swagger/go-swagger/swag"
  "github.com/go-swagger/go-swagger/errors"
  "github.com/go-swagger/go-swagger/httpkit/validate"
  "github.com/go-swagger/go-swagger/client"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

type {{ .Name }}Reader struct {
  formats strfmt.Registry
}

func ({{ .ReceiverName }} *{{.Name}}Reader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
  switch response.Code() {
  {{ range $key, $value := .Responses }}
    case {{ $key }}:
      var result {{ pascalize $value.Name }}
      if err := result.readResponse(response, consumer, {{ $.Receiver }}.formats); err != nil {
        return nil, err
      }
      return {{ if $value.IsSuccess }}&result, nil{{else}}nil, NewAPIError("{{ $value.Name }}", &result, response.Code()){{end}}
  {{end}}{{ if .DefaultResponse }}{{ with .DefaultResponse }}
    default:
      var result {{ .ClassName }}
      if err := result.readResponse(response, consumer, {{ $.Receiver }}.formats); err != nil {
        return nil, err
      }
      return {{ if .IsSuccess }}&result, nil{{else}}nil, NewAPIError("{{ .Name }}", &result, response.Code()){{end}}{{ end }}{{ end }}
  }
}

{{ range $key, $value := .Responses }}
{{ template "clientresponse" $value }}
{{ end }}
{{ if .DefaultResponse }}
{{ template "clientresponse" .DefaultResponse }}
{{ end }}
