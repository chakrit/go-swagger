{{ define "tupleSerializer" }}
// UnmarshalJSON unmarshals this tuple type from a JSON array
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(data []byte) error {
  // stage 1, get the array but just the array
  var stage1 []json.RawMessage
  if err := json.Unmarshal(data, &stage1); err != nil {
    return err
  }
  // stage 2{{ if .AdditionalItems }}
  var lastIndex int
  {{ end }}
  {{ range $idx, $val := .Properties }}if len(stage1) > {{ $idx }} {
    if err := json.Unmarshal(stage1[{{ $idx }}], {{ if not $val.IsNullable }}&{{ end }}{{ $val.ReceiverName }}.{{ pascalize $val.Name }}); err != nil {
      return err
    }{{ if $.AdditionalItems }}
    lastIndex = {{ $idx }}{{end}}
  }
  {{ end }}
  {{ if .AdditionalItems }}
  if len(stage1) > lastIndex+1 {
    for _, val := range stage1[lastIndex+1:] {
      var toadd {{ template "schemaType" .AdditionalItems }}
      if err := json.Unmarshal(val, &toadd); err != nil {
        return err
      }
      {{ .ValueExpression }} = append({{ .ValueExpression }}, toadd)
    }
  }
  {{ end }}return nil
}

// MarshalJSON marshals this tuple type into a JSON array
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) {
  data := []interface{}{
  {{ range .Properties }}{{ pascalize .Name }},
  {{ end }} }
  {{ if .AdditionalItems }}
  for _, v := range {{ .AdditionalItems.ValueExpression }} {
    data = append(data, v)
  }
  {{ end }}
  return json.Marshal(data)
}
{{ end }}
